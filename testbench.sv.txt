`include "transaction.sv"
`include "generator.sv"
`include "driver.sv"
`include "monitor.sv"
`include "scoreboard.sv"
`include "environment.sv"
`include "spi_if.sv"
module testbench;

  logic clk = 0;
  logic rst = 0;
  logic [7:0] data = 8'h00;
  logic [1:0] address = 2'b00;
  logic data_valid = 0;
  logic cs;
  logic sclk;
  logic mosi = 0;
  logic miso;
  logic [4:0] count;
  logic [1:0] addr;
  logic [7:0] out;
  logic [1:0] mode = 2'b00;
  logic transfer_done;

  wire spi_active = ~cs;

  
  spi uut (
    .clk(clk),
    .rst(rst),
    .data_in(data),
    .address(address),
    .data_valid(data_valid),
    .spi_mosi(mosi),
    .spi_miso(miso),
    .spi_cs(cs),
    .spi_sclk(sclk),
    .spi_mode(mode),
    .transfer_done(transfer_done),
    .counter(count),
    .addr(addr),
    .data_out(out)
  );

 
  always #5 clk = ~clk;

  always @(posedge clk) begin
    if (!cs && sclk)
      mosi <= $random;
  end

 
  task send_data(input [7:0] d, input [1:0] addr_val, input [1:0] spi_mode);
    time start_time, end_time;
    begin
      @(posedge clk);
      address = addr_val;
      data = d;
      mode = spi_mode;
      data_valid = 1;
      start_time = $time;
      #100;
      @(posedge clk);
      data_valid = 0;

      wait (transfer_done);
      end_time = $time;

      $display("=== SPI Mode %0d ===", spi_mode);
      $display("Data Sent     : 0x%0h", d);
      $display("Latency       : %0t ns", end_time - start_time);
      $display("Throughput    : %0.2f Mbps", (8.0 * 1000) / (end_time - start_time));
      $display("Clock Cycles  : %0d", (end_time - start_time)/10);
      $display("====================\n");
    end
  endtask


  initial begin
    $display("Time\tclk\trst\tcs\tsclk\tmosi\tmiso\tdata_in\taddr\tcount\tdata_out\ttransfer_done");
    $monitor("%0t\t%b\t%b\t%b\t%b\t%b\t%b\t%h\t%0d\t%0d\t%h\t\t%b",
             $time, clk, rst, cs, sclk, mosi, miso, data, address, count, out, transfer_done);

    
    rst = 1;
    #20;
    rst = 0;

    
    send_data(8'h3C, 2'b00, 2'b00); 
    #50;
    send_data(8'h60, 2'b01, 2'b01); 
    #50;
    send_data(8'hF0, 2'b10, 2'b10);
    #50;
    send_data(8'hA5, 2'b11, 2'b11); 
    #50;

    $finish;
  end

endmodule
